https://nextjs.org/docs


1: Introduction 

Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations.

npx create-next-app@latest

What is your project named? my-app
Would you like to use TypeScript? No / Yes
Would you like to use ESLint? No / Yes
Would you like to use Tailwind CSS? No / Yes
Would you like to use `src/` directory? No / Yes
Would you like to use App Router? (recommended) No / Yes
Would you like to customize the default import alias (@/*)? No / Yes
What import alias would you like configured? @/*


https://nextjs.org/docs/getting-started/project-structure

File Based routing
Pre rendering
API routes
Support css modules
Authneticaion
dev and prod build system


App Router vs Pages Router ?



dev: runs next dev to start Next.js in development mode.
build: runs next build to build the application for production usage.
start: runs next start to start a Next.js production server.
lint: runs next lint to set up Next.js' built-in ESLint configuration.

2: Hello world

3: Project Structure

next.config.js

_app -> describe layout here

Flow : when npm run dev
pages : _app.js -> index.js


4: Next Routing
The Pages Router has a file-system based router built on the concept of pages.

When a file is added to the pages directory, it's automatically available as a route.


 exported from a .js, .jsx, .ts, or .tsx file in the pages directory. Each page is associated with a route based on its file name.

Example: If you create pages/about.js that exports a React component like below, it will be accessible at 


5 : Routing with pages

http://localhost:3000/about
http://localhost:3000/profile

Index routes::

The router will automatically route files named index to the root of the directory.

pages/index.js → /
pages/blog/index.js → /blog

6: Nested Routes:

The router supports nested files. If you create a nested folder structure, files will automatically be routed in the same way still.

pages/blog/first-post.js → /blog/first-post
pages/dashboard/settings/username.js → /dashboard/settings/username


** http://localhost:3000/blog
** http://localhost:3000/blog/first
** http://localhost:3000/blog/second

7: Pages with Dynamic Routes

Dynamic Segments can be accessed from useRouter.

Next.js supports pages with dynamic routes. For example, if you create a file called pages/posts/[id].js, then it will be accessible at posts/1, posts/2, etc.


http://localhost:3000/product/1
http://localhost:3000/product/sweater


If sweater.js is avilabe then it wil be shown else [product].js index file will be shown

  const router = useRouter()
  const productId = router.query.productId


8: Nested dynamic routing

https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes

http://localhost:3000/product/1/review/1

9: Catch ALL routes

Dynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets [...segmentName].


For example, pages/shop/[...slug].js will match /shop/clothes, but also /shop/clothes/tops, /shop/clothes/tops/t-shirts, and so on.

Route	Example URL	params
pages/shop/[...slug].js	/shop/a	{ slug: ['a'] }
pages/shop/[...slug].js	/shop/a/b	{ slug: ['a', 'b'] }
pages/shop/[...slug].js	/shop/a/b/c	{ slug: ['a', 'b', 'c'] }


http://localhost:3000/ [To make this work aadd one more []. optional catch. ] : Else 400 will be thrown

http://localhost:3000/docs/f1
http://localhost:3000/docs/f1/c1
http://localhost:3000/docs/f1/c1/awinas

check console.log

10 : Link Component Navigation

https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating

The Next.js router allows you to do client-side route transitions between pages, similar to a single-page application.

A React component called Link is provided to do this client-side route transition.

Any <Link /> in the viewport (initially or through scroll) will be prefetched by default (including the corresponding data) for pages using Static Generation. The corresponding data for server-rendered routes is fetched only when the <Link /> is clicked.

Linking to dynamic paths :

<Link>


** Place Order

Check about replace tag in <LINK>


11: Navifating programatically


Imperative Routing : router.push('/about')
 	                 router.replace('/about')


12: Custom 404 page

add 404.js

13 : Routing Summary

############################# Pre rendering & Data fetching intro

https://nextjs.org/docs/pages/building-your-application/rendering

14 : Pre rendering & Data fetching intro

Types of Pre-rendering:
 -> Static Genertaion
 	-> Without data
 	-> With data
    -> Incremental static generation
    -> Dynamic Parameters when fetching data
    -> 
-> Server side rendering

Static Generation: The HTML is generated at build time and will be reused on each request.
Server-side Rendering: The HTML is generated on each request.

Client side data fetching .
Combinind prerendering with client side data fetching

15: Pre-rendering

Comparing Traditional React app with Next js app

Comparing the page source :
 Inspect -> view source
 React : only has div 
 Next : Shows the whole file
 By default , Next JS prerenders every page in application
 Prerednder mean ?
  -> Next JS generates HTMK for each page in advance instead of having it all done by client sise java script
 
 Why Pre render ?
  Improves Performance:

  -> In React app , u need to wait for JS to be executed 
  Perhaps fetch data from external api and then render it in UI
  There is wait time for user
  With Pre renderd page , the HTML is already generated and loads faster

  Pre rendering Helps SEO:
   -> 

 16: Static Site genreation:
 https://nextjs.org/docs/pages/building-your-application/rendering/static-site-generation

 If a page uses Static Generation, the page HTML is generated at build time. That means in production, the page HTML is generated when you run next build. This HTML will then be reused on each request. It can be cached by a CDN.

In Next.js, you can statically generate pages with or without data. Let's take a look at each case.

In dev , prerendeing happens every time
 
 17 - Static Generation with getStaticProps

 ** Static Generation without data
 	http://localhost:3000/renderwithoutdata

 ** Static Generation with data
    








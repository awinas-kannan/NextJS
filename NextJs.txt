https://nextjs.org/docs


1: Introduction 

Next.js is a React framework for building full-stack web applications. You use React Components to build user interfaces, and Next.js for additional features and optimizations.

npx create-next-app@latest

What is your project named? my-app
Would you like to use TypeScript? No / Yes
Would you like to use ESLint? No / Yes
Would you like to use Tailwind CSS? No / Yes
Would you like to use `src/` directory? No / Yes
Would you like to use App Router? (recommended) No / Yes
Would you like to customize the default import alias (@/*)? No / Yes
What import alias would you like configured? @/*


https://nextjs.org/docs/getting-started/project-structure

File Based routing
Pre rendering
API routes
Support css modules
Authneticaion
dev and prod build system


App Router vs Pages Router ?



dev: runs next dev to start Next.js in development mode.
build: runs next build to build the application for production usage.
start: runs next start to start a Next.js production server.
lint: runs next lint to set up Next.js' built-in ESLint configuration.

2: Hello world

3: Project Structure

next.config.js

_app -> describe layout here

Flow : when npm run dev
pages : _app.js -> index.js


4: Next Routing
The Pages Router has a file-system based router built on the concept of pages.

When a file is added to the pages directory, it's automatically available as a route.


 exported from a .js, .jsx, .ts, or .tsx file in the pages directory. Each page is associated with a route based on its file name.

Example: If you create pages/about.js that exports a React component like below, it will be accessible at 


5 : Routing with pages

http://localhost:3000/about
http://localhost:3000/profile

Index routes::

The router will automatically route files named index to the root of the directory.

pages/index.js → /
pages/blog/index.js → /blog

6: Nested Routes:

The router supports nested files. If you create a nested folder structure, files will automatically be routed in the same way still.

pages/blog/first-post.js → /blog/first-post
pages/dashboard/settings/username.js → /dashboard/settings/username


** http://localhost:3000/blog
** http://localhost:3000/blog/first
** http://localhost:3000/blog/second

7: Pages with Dynamic Routes

Dynamic Segments can be accessed from useRouter.

Next.js supports pages with dynamic routes. For example, if you create a file called pages/posts/[id].js, then it will be accessible at posts/1, posts/2, etc.


http://localhost:3000/product/1
http://localhost:3000/product/sweater


If sweater.js is avilabe then it wil be shown else [product].js index file will be shown

  const router = useRouter()
  const productId = router.query.productId


8: Nested dynamic routing

https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes

http://localhost:3000/product/1/review/1

9: Catch ALL routes

Dynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets [...segmentName].


For example, pages/shop/[...slug].js will match /shop/clothes, but also /shop/clothes/tops, /shop/clothes/tops/t-shirts, and so on.

Route	Example URL	params
pages/shop/[...slug].js	/shop/a	{ slug: ['a'] }
pages/shop/[...slug].js	/shop/a/b	{ slug: ['a', 'b'] }
pages/shop/[...slug].js	/shop/a/b/c	{ slug: ['a', 'b', 'c'] }


http://localhost:3000/ [To make this work aadd one more []. optional catch. ] : Else 400 will be thrown

http://localhost:3000/docs/f1
http://localhost:3000/docs/f1/c1
http://localhost:3000/docs/f1/c1/awinas

check console.log

10 : Link Component Navigation

https://nextjs.org/docs/pages/building-your-application/routing/linking-and-navigating

The Next.js router allows you to do client-side route transitions between pages, similar to a single-page application.

A React component called Link is provided to do this client-side route transition.

Any <Link /> in the viewport (initially or through scroll) will be prefetched by default (including the corresponding data) for pages using Static Generation. The corresponding data for server-rendered routes is fetched only when the <Link /> is clicked.

Linking to dynamic paths :

<Link>


** Place Order

Check about replace tag in <LINK>


11: Navifating programatically


Imperative Routing : router.push('/about')
 	                 router.replace('/about')


12: Custom 404 page

add 404.js

13 : Routing Summary

############################# Pre rendering & Data fetching intro

https://nextjs.org/docs/pages/building-your-application/rendering

14 : Pre rendering & Data fetching intro

Types of Pre-rendering:
 -> Static Genertaion
 	-> Without data
 	-> With data
    -> Incremental static generation
    -> Dynamic Parameters when fetching data
    -> 
-> Server side rendering

Static Generation: The HTML is generated at build time and will be reused on each request.
Server-side Rendering: The HTML is generated on each request.

Client side data fetching .
Combinind prerendering with client side data fetching

15: Pre-rendering

Comparing Traditional React app with Next js app

Comparing the page source :
 Inspect -> view source
 React : only has div 
 Next : Shows the whole file
 By default , Next JS prerenders every page in application
 Prerednder mean ?
  -> Next JS generates HTMK for each page in advance instead of having it all done by client sise java script
 
 Why Pre render ?
  Improves Performance:

  -> In React app , u need to wait for JS to be executed 
  Perhaps fetch data from external api and then render it in UI
  There is wait time for user
  With Pre renderd page , the HTML is already generated and loads faster

  Pre rendering Helps SEO:
   -> 

 16: Static Site genreation:
 https://nextjs.org/docs/pages/building-your-application/rendering/static-site-generation

 If a page uses Static Generation, the page HTML is generated at build time. That means in production, the page HTML is generated when you run next build. This HTML will then be reused on each request. It can be cached by a CDN.

In Next.js, you can statically generate pages with or without data. Let's take a look at each case.

In dev , prerendeing happens every time
 
 17 - Static Generation with getStaticProps

 ** Static Generation without data
 	http://localhost:3000/renderwithoutdata

 ** Static Generation with data

Some pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use these functions that Next.js provides:

Your page content depends on external data: Use getStaticProps.
Your page paths depend on external data: Use getStaticPaths (usually in addition to getStaticProps).


getStaticProps : http://localhost:3000/users    
Check:
 -> npm run build
 -> npm start
 You ll not find logs:
  -> console.log("Rendering getStaticProps")

But if you simply do nom run dev
you will se the -> console.log("Rendering getStaticProps")
each tiem you hit  http://localhost:3000/users   

18: Pages vs Components
 Created a seperate component for user..

19:  getStaticProps
 https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props

 1: 
 * It runs only on the server side
 * The function will never run client side
 * The code you write inside getStaticProps wont even be included in JS bundle theat is sent to browser

 20 : Inspecting static generation builds

 <<<<< Refer video >>>>>

 21 : Running Static GEneration build

 <<<<< Refer video >>>>>

 22 : Static Site Generation (SSG) with dynamic Parametes

 23 : SSG with getStaticPaths

 24 : Inspecting getStaticPaths Builds

 25 : Fetching paths for getStaticPaths

 26 : getStaticPaths fallback false

 27 : getStaticPaths fallback true

 28 : getStaticPaths fallback blocking

 29 : Incremental static regeneration (ISR)

 30 : Inspecting ISR builds

 31 : SSR- Server side rendering
 Problems with Static Generation :
  -> We cannot fetch data at request time
  -> We dont get access to incomming request


 https://nextjs.org/docs/pages/building-your-application/rendering/server-side-rendering
 Also referred to as "SSR" or "Dynamic Rendering".
 If a page uses Server-side Rendering, the page HTML is generated on each request.
 To use Server-side Rendering for a page, you need to export an async function called getServerSideProps. This function will be called by the server on every request.
 For example, suppose that your page needs to pre-render frequently updated data (fetched from an external API). You can write getServerSideProps which fetches this data and passes it to Page like below:
  
 As you can see, getServerSideProps is similar to getStaticProps, but the difference is that getServerSideProps is run on every request instead of on build time.
 
 https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props
 
 http://localhost:3000/ssr/getServerSideProps

 Important Points :
  -> The code you write inside getServerSideProps will not be included in js bundle
  -> It (getServerSideProps) runs in serverside and will never run in client side

  -> Write server side code directly in getServerSideProps( Fetch data from external api / db/ fs module)

  -> getServerSideProps will return an object and should contain a "props key"

      return {
        props:
        {
            repo
        }
    }

  -> getServerSideProps can we writte in page not in component  
 
 32 : SSR with getServerSideProps
 
  https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props

 33 : SSR with dynamic paramenter

 use context in getServerSideProps

 http://localhost:3000/ssr/getServerSideProps/dynamicparam?postId=3

 34 : SSR getServerSideProps context

 https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props
 
 -> req, res
 -> set cookies
 -> 

 35 : Inspecting SSR Builds

 <<Refer Video>>

 npm run build
 ○  (Static)   prerendered as static content
 ●  (SSG)      prerendered as static HTML (uses getStaticProps)
 ƒ  (Dynamic)  server-rendered on demand

  ƒ /ssr/getServerSideProps               340 B          78.6 kB
  ƒ /ssr/getServerSideProps/dynamicparam  326 B          78.6 kB

  Check the dynamix page symbol 
 
 No HTML Pages will be there for this in .next/server/pages//ssr/getServerSideProps


 36 : Client Side Data fetching

 https://nextjs.org/docs/pages/building-your-application/data-fetching/client-side

  npm install json-server

  add -> "serve-json": "json-server --watch db.json --port 4000" 

  npm run serve-json   

  You can fetch the data using localhost:4000/

  Endpoints:
	http://localhost:4000/products
	http://localhost:4000/news
	http://localhost:4000/dashboard
	http://localhost:4000/events 

 
 http://localhost:3000/swr/dashboard

   
 37 : SWR for Client Side Data fetching
 
 npm install swr

 SWR -> stale-while-revalidate
 https://swr.vercel.app/

 The name “SWR” is derived from stale-while-revalidate, a HTTP cache invalidation strategy popularized by HTTP RFC 5861(opens in a new tab). SWR is a strategy to first return the data from cache (stale), then send the fetch request (revalidate), and finally come with the up-to-date data.

 With SWR, components will get a stream of data updates constantly and automatically.
 And the UI will be always fast and reactive.

  http://localhost:3000/swr/dashboard-swr

 38 : Prerendering + Client Side data fetching
 
 http://localhost:3000/events
 http://localhost:3000/events?category=sports

 39 : Prerendering + Client Side data fetching Sumary

 Check what is shalow routing
 
**************************************************************************

40 : Api routes Section Intro

    -> API routes features
    -> Create basic api in next.js
       -> get
       -> post
       -> dynamic 
       -> delete
       -> catch all api routes

41: Api routes       
     -> Next js is full stack app
     -> You can write FE code in react and apis that can be called by FE code
     -> It allows you to create restful endpoints as part of next js app folder structure
     -> with api folder you can create all the apis for your app
     -> You can add business logic without needing to wrute any additional custom server code and without having to configure any api routes


     From Doc:

     https://nextjs.org/docs/pages/building-your-application/routing/api-routes
     API routes provide a solution to build a public API with Next.js.

	 Any file inside the folder pages/api is mapped to /api/* and will be treated as an API endpoint instead of a page. They are server-side only bundles and won't increase your client-side bundle size.

	 http://localhost:3000/api
	 http://localhost:3000/api/blog
	 http://localhost:3000/api/blog/blog_1
 
42 : API Get Request:
     
     -> http://localhost:3000/comments
     -> Load Comments

     Steps :
       create comments/index.js in api folder
       Add the logic to fetch data from data json
       create a comments page in pages folder
       Create a button to load the comments.

43 : API Post Request :
     -> http://localhost:3000/comments

     ->Create an input 
     ->Add a submit button
     ->Clicking on submit buttin shoud update the comments json stored in data
     -> Creata an api
     ->     
     const comment = req.body.comment
     const newComment = {
      id: Date.now(),
      text: comment
    }
    comments.push(newComment)
    res.status(201).json(newComment)      


 44 : Dynamic API Routes

     -> GET Request
        Fetch data based on id :
          if (req.method === 'GET') {
			    const comment = comments.find(comment => comment.id === parseInt(commentId))
			    res.status(200).json(comment)
  		} 


45:  Dynamic API Routes - Delete  		
     -> Delete request
 		 -> Create an api that can acceept id
 		     http://localhost:3000/comments/1
 		 -> Create else condifion to handel DELETE method


46:  Catch All API Routes
    -> create a file named [[..params]].js {Optional catch all routes}

    -> http://localhost:3000/api/awinas/kannan/m/r
    -> response :
    [
		"awinas",
		"kannan",
		"m",
		"r"
	]	      

    -> http://localhost:3000/api/awinas/kannan/m/r?name=awinas&inital=mr&dept=csk#1001
    -> {
	  name: 'awinas',
	  inital: 'mr',
	  dept: 'csk',
	  params: [ 'awinas', 'kannan', 'm', 'r' ]
	}

	  console.log(req.query)
	  const params = req.query.params
	  console.log(params)
	  const data = {
	    query: req.query,
	    url: req.url,
	    hashValues: req.url.split('#')
	  }
  	 res.status(200).json(data)

  	 To get he hash value in react component::
  	 console.log(window.location.hash)

  	 Please note that the hash value is not sent to the server when a request is made. It is purely for client-side navigation within the page.

     Q : will we get # in spring boot ?
     The reason is that the fragment identifier (the part after the "#") is not sent to the server by the browser. It is only used by the browser to navigate within the retrieved HTML document.

	 If you need to access thate value after the "#" symbol on the server-side, you would need to modify your application to pass that value as a query parameter or as part of the path. For example, instead of using a URL like `http://example.com/mypage#value`, you could use `http://example.com/mypage?param=value` or `http://example.com/mypage/value`. Then, you can use Spring Boot's request mapping and request parameter annotations to access the value in your server-side code.

 47: APIs and rerendering:

     -> Create a page [comment].js
     -> Create getStaticPaths function that return a object
     with path property
     -> Create getStaticProps function
        -> Dont call the api here
        -> 

48 : Api Routes Sumary
    -> API routes mechanism is similar to page based routing mechanism
    -> APis are associated with a route based on their file name
    -> Every api route exposts a default function named as handler function
    -> The handler function received req and response as parameters
    -> Cater diff request types like GET and POST using req.method
    -> Dynaic api routes
       comments/1
       comments/100
    -> Catch all api routes [[...params]]
    -> Handle delete
    -> we should not use our own api routes for pre rendering content (This ll cause delay)
  
  ###### ###### ######We are done with Routing .... Pre rendering .... API routes.... ####### ######. #######


************************************************************************** Styles

49 : 

50 : Global Style components
  -> Add a style.css in styles folder
  -> Import it in _app.js file

51 : 

52 :

53 :

**************************************************************************

This following Auth part reg next-auth is based on next-auth v3
but i have updated to next-auth v4 in examples

66 : Next JS Auth Intro

67 : Authentication in Next Js
     -> Client side auth
     -> Server side auth
     -> app routes auth
     -> user data
     -> Auth serivces like github & google
     -> next-auth.js.org
     ->

68 : Next Auth Setup
     -> https://next-auth.js.org/getting-started/example
     -> npm install next-auth
     -> To add NextAuth.js to a project create a file called [...nextauth].js in pages/api/auth
     -> Add Provider -> Github /Google
     -> Generate client id * secret from github

     -> Built in sign in
        -> http://localhost:3000/api/auth/signin 
           -> created next-auth.session-token
        -> http://localhost:3000/api/auth/signout
           -> Deleted next-auth.session-token


By default, the session token generated by NextAuth.js has a default expiration time of 30 days. However, you can customize the expiration time by specifying a `session.expires` property in your NextAuth.js configuration file.

Check Chat GPT about the token expiry


69 : Sign in and Sign Out

    When used id in signIN -> then github page is skipped
    It direclty authenticates
    Check newtwork
    signIn('github')
    signIn('')

70 : Client Side Auth
     -> Add Session Provider
     -> use UseSession Hook 

71 : Securing Client pages   
  -> https://next-auth.js.org/getting-started/client#getsession

  getSession()
	Client Side: Yes
	Server Side: No (See: getServerSession()
	NextAuth.js provides a getSession() helper which should be called client side only to return the current active session.

	On the server side, this is still available to use, however, we recommend using getServerSession going forward. The idea behind this is to avoid an additional unnecessary fetch call on the server side. For more information, please check out this issue. 
  
  --> Check how to access getSession from getServerSideProps

  
 72 : Next Auth Provider 
      <SessionProvider>
      

**************************************************************************
   